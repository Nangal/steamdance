// Generated by CoffeeScript 1.7.1
var bp, el, isEmpty, load, save, sim, worldName, worldNameDiv;

worldNameDiv = document.getElementById('worldname');

worldName = null;

load = function() {
  var grid, gridStr, hash;
  if (!location.hash) {
    location.hash = '#boilerplate';
  }
  hash = location.hash;
  worldName = hash.slice(1);
  worldNameDiv.textContent = "local/\#" + worldName;
  gridStr = localStorage.getItem("world " + worldName);
  if (gridStr !== '') {
    try {
      grid = JSON.parse(gridStr);
      if (grid) {
        console.log('loaded', worldName);
      }
      return grid;
    } catch (_error) {}
  }
};

sim = new Simulator(load());

el = document.getElementById('bp');

bp = new Boilerplate(el, sim);

window.onresize = function() {
  return bp.resizeTo(window.innerWidth, window.innerHeight);
};

isEmpty = function(obj) {
  var k;
  for (k in obj) {
    return false;
  }
  return true;
};

setInterval((function(_this) {
  return function() {
    var delta;
    delta = sim.step();
    if (!isEmpty(delta.changed)) {
      return bp.draw();
    }
  };
})(this), 200);

bp.onEditFinish = save = function() {
  console.log('saving', worldName);
  return localStorage.setItem("world " + worldName, JSON.stringify(sim.getGrid()));
};

setInterval(save, 5000);

window.onhashchange = function() {
  sim.grid = load() || {};
  return bp.draw();
};

window.addEventListener('copy', function(e) {
  var _ref, _ref1;
  return (_ref = document.activeElement) != null ? (_ref1 = _ref.boilerplate) != null ? _ref1.copy(e) : void 0 : void 0;
});

window.addEventListener('paste', function(e) {
  var _ref, _ref1;
  return (_ref = document.activeElement) != null ? (_ref1 = _ref.boilerplate) != null ? _ref1.paste(e) : void 0 : void 0;
});

el.focus();

Boilerplate.addKeyListener(window);

(function() {
  var panel, selected;
  panel = document.getElementsByClassName('toolpanel')[0];
  selected = null;
  panel.onclick = function(e) {
    var element;
    element = e.target;
    if (element === panel) {
      return;
    }
    return Boilerplate.changeTool(element.id);
  };
  return Boilerplate.onToolChanged = function(newTool) {
    var e;
    if (selected) {
      selected.className = '';
    }
    e = document.getElementById(newTool || 'solid');
    if (!e) {
      return;
    }
    e.className = 'selected';
    return selected = e;
  };
})();
