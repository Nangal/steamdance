// Generated by CoffeeScript 1.7.1
var boilerplate, sim, start, ws;

sim = null;

boilerplate = null;

start = function(initialGrid) {
  var container, delta, sendTimer;
  sim = new Simulator(initialGrid);
  container = document.getElementById('bp');
  boilerplate = new Boilerplate(container, sim);
  container.focus();
  (window.onresize = function() {
    return boilerplate.resizeTo(window.innerWidth, window.innerHeight);
  })();
  sendTimer = null;
  delta = null;
  return boilerplate.onEdit = function(x, y, value) {
    if (delta == null) {
      delta = {};
    }
    delta[[x, y]] = value;
    if (sendTimer === null) {
      return sendTimer = setTimeout(function() {
        ws.send(JSON.stringify({
          delta: delta
        }));
        delta = null;
        return sendTimer = null;
      });
    }
  };
};

ws = new WebSocket('ws://' + window.location.host + window.location.pathname);

ws.onerror = function(err) {
  return console.err(err);
};

ws.onmessage = function(msg) {
  var k, v, x, y, _ref, _ref1, _ref2;
  msg = JSON.parse(msg.data);
  if (msg.initial) {
    return start(msg.initial);
  } else if ((_ref = msg.delta) != null ? _ref.changed : void 0) {
    _ref1 = msg.delta.changed;
    for (k in _ref1) {
      v = _ref1[k];
      _ref2 = Simulator.parseXY(k), x = _ref2.x, y = _ref2.y;
      sim.set(x, y, v);
    }
    return boilerplate.draw();
  }
};

window.addEventListener('copy', function(e) {
  var _ref, _ref1;
  return (_ref = document.activeElement) != null ? (_ref1 = _ref.boilerplate) != null ? _ref1.copy(e) : void 0 : void 0;
});

window.addEventListener('paste', function(e) {
  var _ref, _ref1;
  return (_ref = document.activeElement) != null ? (_ref1 = _ref.boilerplate) != null ? _ref1.paste(e) : void 0 : void 0;
});

Boilerplate.addKeyListener(window);

(function() {
  var panel, selected;
  panel = document.getElementsByClassName('toolpanel')[0];
  selected = null;
  panel.onclick = function(e) {
    var element;
    element = e.target;
    if (element === panel) {
      return;
    }
    return Boilerplate.changeTool(element.id);
  };
  Boilerplate.onToolChanged = function(newTool) {
    var e;
    if (selected) {
      selected.className = '';
    }
    e = document.getElementById(newTool || 'solid');
    if (!e) {
      return;
    }
    e.className = 'selected';
    return selected = e;
  };
  return Boilerplate.onToolChanged(Boilerplate.activeTool);
})();
